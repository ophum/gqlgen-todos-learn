package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"errors"
	"log"
	"sort"
	"time"

	"github.com/google/uuid"
	"github.com/ophum/gqlgen-todos-learn/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	id, err := uuid.NewRandom()
	if err != nil {
		return nil, err
	}
	todo := &model.Todo{
		Text:   input.Text,
		ID:     id.String(),
		UserID: input.UserID,
	}
	history := &model.History{
		CreatedAt: time.Now(),
		TodoID:    id.String(),
		Text:      input.Text,
	}

	r.mu.Lock()
	defer r.mu.Unlock()
	r.addTodo(todo)
	r.addHistory(history)
	return todo, nil
}

// DoneTodo is the resolver for the doneTodo field.
func (r *mutationResolver) DoneTodo(ctx context.Context, input model.DoneTodo) (*model.Todo, error) {
	r.mu.Lock()
	defer r.mu.Unlock()

	todo, err := r.findTodo(input.TodoID)
	if err != nil {
		return nil, err
	}

	if todo.Done {
		return nil, errors.New("already done")
	}
	todo.Done = true

	r.updateTodo(todo)
	r.addHistory(&model.History{
		TodoID:    todo.ID,
		Text:      todo.Text,
		Done:      todo.Done,
		CreatedAt: time.Now(),
	})

	return todo, nil
}

// ToggleTodo is the resolver for the toggleTodo field.
func (r *mutationResolver) ToggleTodo(ctx context.Context, input model.ToggleTodo) (*model.Todo, error) {
	r.mu.Lock()
	defer r.mu.Unlock()

	todo, err := r.findTodo(input.TodoID)
	if err != nil {
		return nil, err
	}

	todo.Done = !todo.Done

	if err := r.updateTodo(todo); err != nil {
		return nil, err
	}

	r.addHistory(&model.History{
		TodoID:    todo.ID,
		Text:      todo.Text,
		Done:      todo.Done,
		CreatedAt: time.Now(),
	})

	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	r.mu.RLock()
	defer r.mu.RUnlock()
	log.Println("call Resolver Todos")

	res := make([]*model.Todo, 0, len(r.todos))
	for _, t := range r.todos {
		res = append(res, r.copyTodo(t))
	}
	return res, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	log.Println("call Resolver User")
	return &model.User{ID: obj.UserID, Name: "user " + obj.UserID}, nil
}

// Histories is the resolver for the histories field.
func (r *todoResolver) Histories(ctx context.Context, obj *model.Todo) ([]*model.History, error) {
	r.mu.RLock()
	defer r.mu.RUnlock()
	log.Println("call Resolver Histories")
	histories := []*model.History{}
	for _, h := range r.histories {
		if h.TodoID == obj.ID {
			histories = append(histories, r.copyHistory(h))
		}
	}
	sort.SliceStable(histories, func(i, j int) bool {
		return histories[i].CreatedAt.Before(histories[j].CreatedAt)
	})
	return histories, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
